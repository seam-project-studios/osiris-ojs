<?
/*
Consult input-date.atjs and input-button.atjs for respective usage

Usage: <?=element('input', { args }) ?>
args is a key/value object representing the html attributes and extra functionality
HTML attributes passed through and quoted (* denotes required):
id, *type, *name, title, value, placeholder, pattern, min, max, minlength, maxlength, list
HTML attributes are added if a truthy value is given to the key:
required, disabled, checked

Minimal example:
element('input', {name: 'test', type: 'text', required: true })

Code passed through to another element to deal with
element('input', {name: 'theDate', type: 'date', value: new Date() })

Validation can be achieved primarily with required and pattern:
element('input', {name: 'patternTest', type: 'text', pattern='[A-Za-z0-9 ]+' }) // 1 or more A-Za-z0-9 or space

If this is not enough you can provide a function on args.validate.
This can take two arguments: first is the value to check, the second is the HTML DOM object:
element('input', {name: 'patternTest', type: 'text', validate: (value, object) => {
  if (isValid) return true;
  if (isInvalid) return false;
}})
*/

// arg check
if (!args.type) {
  return await print('input.atjs: Error: Expected type argument');
}

if (typeof args.id === 'undefined') args.id = 'atjs' + UID(); // assign an ID if not exists

// handle redirecting to other dedicated elements
if (args.type === 'date') {
  return await element('input-date', args);
}

if (args.type === 'button' || args.type === 'submit') {
  return await element('input-button', args);
}

// arg check
if (!args.name) {
  return await print('input.atjs: Error: Expected name argument');
}

// utility functions
const showAttrs = async (attrs, value) => {
  let r = [];
  for (let attr of attrs) {
    if (typeof args[attr] === 'undefined') continue;
    if (typeof args[attr] === 'number') {
      // don't try to q() numbers
      r.push(attr + "=\"" + args[attr] + "\"");
    } else {
      r.push(attr + "=\"" + await q(args[attr]) + "\"");
    }
  }
  return ' ' + r.join(' ');
};

const showTruthyAttrs = async(attrs) => {
  let r = [];
  for (let attr of attrs) {
    if (args[attr]) r.push(attr);
  }
  return ' ' + r.join(' ');
};

const showClass = () => {
  if (!args.class) return "";
  if (Array.isArray(args.class)) return ' ' + args.class.join(" ");
  return ' ' + args.class;
};

if (typeof args.validate === 'function') {
  let errorText = await q(args.validationError);

  js(`
(() => {
  const validateField = ` + args.validate.toString() + `;
  const object = document.getElementById("` + args.id + `");
  const validate = () => {
    if (!validateField(object.value, object)) {
      object.setCustomValidity("` + errorText + `");
      return false;
    } else {
      object.setCustomValidity("");
      return true;
    }
  };
  $(object.form).submit(validate);
  $(object).on('change keyup blur', validate);
})();
  `);
}

if (args.type === 'checkbox') {
?>
<div class="input-group<?=showClass() ?><?=args.checked ? ' checked' : '' ?>">
  <label>
    <? if (args.label) { ?>
    <span><?= (args.label) ?></span>
    <? } ?>
    <input type="<?=args.type ?>" name="<?=args.name ?>"
      <?=showAttrs(['id','title','value']) ?>
      <?=showTruthyAttrs(['disabled', 'required', 'checked']) ?>
    />
    <div class="pseudo"></div>
  </label>
</div>
<div class="help-error radio-error"><?=q(args.validationError) ?></div>
<?
} else if (args.type === 'radio') {
?>
<div class="input-group<?=showClass() ?><?=args.checked ? ' checked' : '' ?>">
  <input type="<?=args.type ?>" name="<?=args.name ?>"
    <?=showAttrs(['id','title','value']) ?>
    <?=showTruthyAttrs(['disabled', 'required', 'checked']) ?>
  />
  <label for="<?=args.id ?>"><?=(args.label) ?></label>
</div>
<div class="help-error"><?=q(args.validationError) ?></div>

<? } else { ?>

<div class="input-group<?=showClass() ?>">
  <input type="<?=args.type ?>" name="<?=args.name ?>"
    <?=showAttrs(['id','title','value','placeholder','pattern','min','max','minlength','maxlength','list', 'inputmode']) ?>
    <?=showTruthyAttrs(['disabled','required']) ?>
    <? if (args.inputmask) { ?>
      data-inputmask="<?=args.inputmask ?>"
    <? }?>
  /><label>
    <?=(args.label) ?>
  </label>
</div>
<div class="help-error"><?=q(args.validationError) ?></div>
<?
  if (args.requiredError) {
?>
<div class="required-error"><?=q(args.requiredError) ?></div>
<?
  }
}
?>
