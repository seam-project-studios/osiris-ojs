<?
// arg check
if (!args.name) {
  return yield print('input.atjs: Error: Expected name argument');
}

if (!args.options) {
  return yield print('input.atjs: Error: Expected options argument');
}


// utility functions
const showAttrs = async (attrs, value) => {
  let r = [];
  for (let attr of attrs) {
    if (typeof args[attr] === 'undefined') continue;
    if (typeof args[attr] === 'number') {
      // don't try to q() numbers
      r.push(attr + "=\"" + args[attr] + "\"");
    } else {
      r.push(attr + "=\"" + await q(args[attr]) + "\"");
    }
  }
  return ' ' + r.join(' ');
};

const showTruthyAttrs = async(attrs) => {
  let r = [];
  for (let attr of attrs) {
    if (args[attr]) r.push(attr);
  }
  return ' ' + r.join(' ');
};

?>
<div class="input-group">
  <select
    <?=showAttrs(['id','title','name']) ?>
    <?=showTruthyAttrs(['disabled', 'required']) ?>
  >
    <option value="" selected></option>
    <?
      let i18nKV = yield args.options;
      for (let key of Object.keys(i18nKV)) {
      ?>
        <option value="<?=key ?>"><?=i18nKV[key] ?></option>
      <?
      }
    ?>
  </select>
  <label>
    <?=q(args.label) ?>
  </label>
</div>
<div class="help-error"><?=q(args.validationError) ?></div>
<?
if (args.requiredError) {
?>
<div class="required-error"><?=q(args.requiredError) ?></div>
<?
}
?>